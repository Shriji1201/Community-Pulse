from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash
from dotenv import load_dotenv
from flask_migrate import Migrate
import os

load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///community_pulse.db')
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'default-secret')

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Flask-Login setup
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Database Models (updated)
class User(UserMixin, db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    is_banned = db.Column(db.Boolean, default=False)
    verified_organizer = db.Column(db.Boolean, default=False)
    events = db.relationship('Event', backref='organizer', lazy=True)

    # Add named constraints
    __table_args__ = (
        db.UniqueConstraint('username', name='Shriji Soni'),
        db.UniqueConstraint('email', name='randomunique@gmail.com'),
    )



class Event(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    category = db.Column(db.String(50), nullable=False)
    location = db.Column(db.String(200), nullable=False)
    date = db.Column(db.DateTime, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    approved = db.Column(db.Boolean, default=False)
    cancelled = db.Column(db.Boolean, default=False)
    participants = db.relationship('Participant', backref='event', lazy=True)

class Participant(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(15), nullable=False)
    guests = db.Column(db.Integer, default=0)
    event_id = db.Column(db.Integer, db.ForeignKey('event.id'), nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Create database tables
with app.app_context():
    db.create_all()


# Routes (updated)
@app.route('/')
def home():
    events = Event.query.filter_by(approved=True, cancelled=False).order_by(Event.date.desc()).limit(5).all()
    return render_template('home.html', events=events)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        user = User.query.filter_by(email=email).first()

        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('home'))
        flash('Invalid email or password')
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')

        if User.query.filter_by(email=email).first():
            flash('Email already exists')
            return redirect(url_for('signup'))

        if User.query.filter_by(username=username).first():
            flash('Username already exists')
            return redirect(url_for('signup'))

        new_user = User(
            username=username,
            email=email,
            password=generate_password_hash(password)  

        )
        db.session.add(new_user)
        db.session.commit()
        login_user(new_user)
        return redirect(url_for('home'))
    return render_template('signup.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('home'))

@app.route('/create_event', methods=['GET', 'POST'])
@login_required
def create_event():
    if request.method == 'POST':
        new_event = Event(
            title=request.form.get('title'),
            description=request.form.get('description'),
            category=request.form.get('category'),
            location=request.form.get('location'),
            date=datetime.strptime(request.form.get('date'), '%Y-%m-%dT%H:%M'),
            created_by=current_user.id,
            approved=current_user.verified_organizer  # Auto-approve for verified organizers
        )
        db.session.add(new_event)
        db.session.commit()
        flash('Event submitted for approval' if not current_user.verified_organizer else 'Event created successfully!')
        return redirect(url_for('home'))
    return render_template('create_event.html')

@app.route('/events')
def events():
    category = request.args.get('category')
    query = Event.query.filter_by(approved=True, cancelled=False)

    if category:
        query = query.filter_by(category=category)

    events = query.order_by(Event.date.asc()).all()
    categories = db.session.query(Event.category.distinct()).all()
    return render_template('events.html', events=events, categories=categories)

# ... (keep previous event_detail and admin routes)

if __name__ == '__main__':
    app.run(debug=True)
